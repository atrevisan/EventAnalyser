# Author: Allan Caminha Trevisan <allan.trvsn@gmail.com>
# (c) 2014
#
# License: MIT

from PyQt4.QtGui import QWidget
from PyQt4 import QtGui, QtCore
import PyQt4

import matplotlib.pyplot as plt
import os
import os.path
import numpy as np

from core.gui.ui_widget_ngrams import Ui_widget_ngrams

class WidgetNGrams(QWidget, Ui_widget_ngrams):
    """This widget displays n-grams frequency distributions.
    
    The n-grams frequency distributions are generated based on
    month, day and hour.

    Parameters
    ----------
    tweets : list of tuples
        Store tweets in the form (cluster_label, created_at, retweet_count, tweet_text).

    dataset_top_ngrams : list of tuples (string, number)
        The global importance for each of the top ngram in a text corpus in descending order.

    tokenizer : callable
        Reference to the function generated by the vectorizer used in the document clustering, 
        this function is used to handle tokenization of text documents.

    file_name : string
        The file base name for the ngram that is being generated.
    """
    def __init__(self, tweets, dataset_top_ngrams, tokenizer, file_name):

        QWidget.__init__(self)
        
        # set up User Interface (widgets, layout...)
        self.setupUi(self)

        self.tweets = tweets
        self.file_name = file_name
        self.tokenizer = tokenizer

        self.combo_year.setDisabled(True)
        self.combo_month.setDisabled(True)
        self.combo_day.setDisabled(True)

        self.button_info_per_month.setDisabled(True)
        self.button_info_per_day.setDisabled(True)
        self.button_info_per_hour.setDisabled(True)
            
        self.combo_ngrams.addItems([ngram[0] for ngram in dataset_top_ngrams])
        self.combo_ngrams.activated[str].connect(self.on_activated_combo_ngrams)

        self.combo_year.activated[str].connect(self.on_activated_combo_year)
        self.combo_month.activated[str].connect(self.on_activated_combo_month)
        self.combo_day.activated[str].connect(self.on_activated_combo_day)

        self.button_info_per_month.clicked.connect(self.generate_info_per_month)
        self.button_info_per_day.clicked.connect(self.generate_info_per_day)
        self.button_info_per_hour.clicked.connect(self.generate_info_per_hour)

    def on_activated_combo_ngrams(self, ngram):
        """Handle events on the combo box n-grams.

        Enable combo year and fill in the available years. Also enables
        the button info per month.
        
        Parameters
        ----------
        ngram : string
            The n-gram chosen by the user in the combo box.
        """

        self.combo_year.setDisabled(False)
        self.button_info_per_month.setDisabled(False)
        
        list_of_years = []
        for tweet in self.tweets:

            tweet_time = tweet[1]
            tweet_year = tweet_time.split()[5]
            list_of_years.append(tweet_year)

        self.combo_year.addItems(list(set(list_of_years)))

        if self.radio_hour.isChecked():

            ngram_file_name = os.getcwd() + "\\graphs\\" + self.file_name + "_" + ngram.replace(' ', '_') + "_per_hour" + ".png"

            if not os.path.isfile(ngram_file_name):

                self.generate_ngram_per_hour(ngram_file_name, ngram)

            image = QtGui.QImage(ngram_file_name)
            pp = QtGui.QPixmap.fromImage(image.scaled(self.label_graph.width(), self.label_graph.height()))

            self.label_graph.setPixmap(pp)

        else:
            ngram_file_name = os.getcwd() + "\\graphs\\" + self.file_name + "_" + ngram.replace(' ', '_') + "_per_day_of_week" + ".png"

            if not os.path.isfile(ngram_file_name):

                self.generate_ngram_per_day_of_week(ngram_file_name, ngram)

            image = QtGui.QImage(ngram_file_name)
            pp = QtGui.QPixmap.fromImage(image.scaled(self.label_graph.width(), self.label_graph.height()))

            self.label_graph.setPixmap(pp)

    def on_activated_combo_year(self, year):
        """Handle event on the combo box year.
        
        Sets the chosen year variable. The respective seted value will
        be used to generate the n-gram frequency distribution troughout
        the months of the year.

        year : str
            The year chosen by the user in the combo box.
        """

        self.chosen_year = year

    def generate_info_per_month(self):
        pass


    def generate_ngram_per_hour(self, file_name, ngram):
        """Generate the ngram and ngram per cluster hourly distribution graph.
        
        Parameters
        -----------
        file_name : string
            The file name for the ngram .png graph that will be generated.

        ngram : string
            The ngram from which the hourly frequency distribution graph
            will be generated
        """

        # store the frequency of the given ngram per hour
        ngram_per_hour_frequency = {}
        for tweet in self.tweets:

            tweet_time = tweet[1]
            tweet_text = tweet[3]

            tweet_tokens = self.analyser(tweet_text)
            hour = tweet_time.split()[3].split(":")[0]

            if hour in ngram_per_hour_frequency:

                # test if the ngram is in the tweet
                if ngram in tweet_tokens:
                    ngram_per_hour_frequency[hour] += 1

            else:
                ngram_per_hour_frequency[hour] = 0

                # test if the ngram is in the tweet
                if ngram in tweet_tokens:
                    ngram_per_hour_frequency[hour] += 1

        # Generate graph plot
        y = [y for x, y in sorted([(int(x), y) for x, y in list(ngram_per_hour_frequency.items())], key=lambda x : x[0])]
        x = [x for x, y in sorted([(int(x), y) for x, y in list(ngram_per_hour_frequency.items())], key=lambda x : x[0])]

        max_frequency = sorted (y, key=lambda x : -x)[0]
        #print("Max frequency: %d" %max_frequency)

        plt.plot(x, y, linewidth=1.5, label=ngram)
        plt.legend()
        plt.axis([0, 23, 0, max_frequency])
        plt.xlabel("Hour")
        plt.ylabel("N-gram frequency")
        plt.title("N-gram frequency distribution")

        plt.savefig(file_name)
        plt.close()

    def generate_ngram_per_day_of_week(self, file_name, ngram):
        """Generate the ngrams and ngrams per cluster day of week distribution graphs.
        
        Parameters
        -----------
        file_name : string
            The base name for the ngrams .png graphs that will be generated.

        ngram : string
            The ngram from wich the day of week distribution graphs
            will be generated
        """

        # store the frequency of the given ngram per day of week
        ngram_per_day_of_week_frequency = {}
        for tweet in self.tweets:

            tweet_time = tweet[1]
            tweet_text = tweet[3]

            tweet_tokens = self.analyser(tweet_text)
            day_of_week = tweet_time.split()[0]

            if day_of_week in ngram_per_day_of_week_frequency:

                # test if the ngram is in the tweet
                if ngram in tweet_tokens:
                    ngram_per_day_of_week_frequency[day_of_week] += 1

            else:
                ngram_per_day_of_week_frequency[day_of_week] = 0

                # test if the ngram is in the tweet
                if ngram in tweet_tokens:
                    ngram_per_day_of_week_frequency[day_of_week] += 1

        # Generate graph plot
        
        x_ticks = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]

        ngram_per_day_of_week_frequency = [(x_ticks.index(x), y) for x, y in list (ngram_per_day_of_week_frequency.items())]

        ngram_per_day_of_week_frequency_ordered = sorted(ngram_per_day_of_week_frequency, 
                                                         key=lambda x : x[0])

        y_values = [y for (x, y) in ngram_per_day_of_week_frequency_ordered]
        x_values = [x for (x, y) in ngram_per_day_of_week_frequency_ordered]

        max_frequency = sorted (y_values, key=lambda x : -x)[0]
                
        #print("Max frequency: %d" %max_frequency)

        plt.plot(x_values, y_values, linewidth=1.5, label=ngram)
        plt.legend()
          
        plt.xticks(np.arange(0, 7), x_ticks)
        plt.ylim(0, max_frequency)
                
        plt.xlabel("Day of week")
        plt.ylabel("N-gram frequency")
        plt.title("N-gram frequency distribution")

        plt.savefig(file_name)
        plt.close()

    